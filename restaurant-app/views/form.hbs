<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Restaurant List</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background-image: url('/images/two.jpg');
            /* Replace with your background image URL */
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }
    </style>
</head>

<body class="text-gray-800 font-sans leading-normal tracking-normal">
    <!-- Header -->
    <header class="bg-[#c85250] shadow-md p-4">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-4xl font-bold text-white px-10">CuisineAtlas</h1>
            <nav class="space-x-5">
                <a href="/login" class="text-white hover:text-gray-300 text-l px-10">Logout</a>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <div class="bg-black bg-opacity-50  mx-auto max-w-5xl px-5 py-10">
        <div class="container mx-auto max-w-5xl px-4">
            <h2 class="text-4xl font-semibold mb-6 text-center text-white">Restaurant List</h2>


            <!-- Filter Form -->
            <form action="/api/restaurants" method="GET"
                class="bg-[#F9F8EB] p-6 rounded shadow-md mb-6 border border-gray-200">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label for="page" class="block text-sm font-medium text-gray-700">Page:</label>
                        <input type="number" id="page" name="page" min="1" value="{{currentPage}}" required
                            class="w-full p-2 border rounded focus:outline-none focus:ring focus:ring-gray-400">
                    </div>
                    <div>
                        <label for="perPage" class="block text-sm font-medium text-gray-700">Items per Page:</label>
                        <input type="number" id="perPage" name="perPage" min="1" value="{{perPage}}" required
                            class="w-full p-2 border rounded focus:outline-none focus:ring focus:ring-gray-400">
                    </div>
                    <div>
                        <label for="borough" class="block text-sm font-medium text-gray-700">Borough:</label>
                        <input type="text" id="borough" name="borough" value="{{borough}}"
                            class="w-full p-2 border rounded focus:outline-none focus:ring focus:ring-gray-400">
                    </div>
                </div>
                <div class="mt-4 flex justify-center">
                    <button type="submit"
                        class="bg-[#2E2E2E] text-white px-4 py-2 rounded shadow hover:bg-gray-700 focus:outline-none">
                        Filter
                    </button>
                </div>
            </form>

            <!-- Add and Export Buttons -->
            <div class="flex space-x-4 mb-6">
                <a href="/add-restaurant"
                    class="bg-[#2E2E2E] text-white px-4 py-2 rounded shadow hover:bg-gray-700 focus:outline-none">
                    Add New Restaurant
                </a>
                <a href="/api/restaurants/export/csv"
                    class="bg-[#2E2E2E] text-white px-4 py-2 rounded shadow hover:bg-gray-700 focus:outline-none">
                    Export CSV
                </a>
                <a href="/api/restaurants/export/pdf"
                    class="bg-[#2E2E2E] text-white px-4 py-2 rounded shadow hover:bg-gray-700 focus:outline-none">
                    Export PDF
                </a>
            </div>

            <!-- Restaurant Table -->
            <div class="overflow-x-auto bg-[#F9F8EB] rounded shadow-md border border-gray-200">
                <table class="table-auto w-full border border-gray-300">
                    <thead>
                        <tr class="bg-[#c85250]">
                            <th class="px-4 py-2 border border-gray-300 text-left text-white">Name</th>
                            <th class="px-4 py-2 border border-gray-300 text-left text-white">Borough</th>
                            <th class="px-4 py-2 border border-gray-300 text-left text-white">Cuisine</th>
                            <th class="px-4 py-2 border border-gray-300 text-left text-white">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each restaurants}}
                        <tr class="hover:bg-gray-100">
                            <td class="px-4 py-2 border border-gray-300">{{this.name}}</td>
                            <td class="px-4 py-2 border border-gray-300">{{this.borough}}</td>
                            <td class="px-4 py-2 border border-gray-300">{{this.cuisine}}</td>
                            <td class="px-4 py-2 border border-gray-300 flex justify-center items-center space-x-2">
                                <button type="button"
                                    onclick="openModal('{{this._id}}', '{{this.name}}', '{{this.borough}}', '{{this.cuisine}}')"
                                    class="bg-[#2E2E2E] text-sm text-white px-3 py-1 rounded shadow hover:bg-gray-700 focus:outline-none">
                                    Update
                                </button>
                                <button type="button" onclick="deleteRestaurant('{{this._id}}')"
                                    class="bg-[#2E2E2E] text-sm text-white px-3 py-1 rounded shadow hover:bg-gray-700 focus:outline-none">
                                    Delete
                                </button>
                                <button type="button" onclick="openDetailsModal('{{this._id}}')"
                                    class="bg-[#2E2E2E] text-sm text-white px-3 py-1 rounded shadow hover:bg-gray-700 focus:outline-none">
                                    View 
                                </button>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="flex justify-center mt-6">
                <nav class="flex space-x-2">
                    {{#if (gt currentPage 1)}}
                    <a href="?page=1&perPage={{perPage}}&borough={{borough}}"
                        class="bg-[#2E2E2E] text-white px-3 py-2 rounded shadow hover:bg-gray-700">
                        &laquo; First
                    </a>
                    <a href="?page={{subtract currentPage 1}}&perPage={{perPage}}&borough={{borough}}"
                        class="bg-[#2E2E2E] text-white px-3 py-2 rounded shadow hover:bg-gray-700">
                        Prev
                    </a>
                    {{/if}}

                    {{#each (range 1 totalPages)}}
                    <a href="?page={{this}}&perPage={{../perPage}}&borough={{../borough}}"
                        class="bg-[#2E2E2E] text-white px-3 py-2 rounded shadow hover:bg-gray-700">
                        {{this}}
                    </a>
                    {{/each}}

                    {{#if (lt currentPage totalPages)}}
                    <a href="?page={{add currentPage 1}}&perPage={{perPage}}&borough={{borough}}"
                        class="bg-[#2E2E2E] text-white px-3 py-2 rounded shadow hover:bg-gray-700">
                        Next
                    </a>
                    <a href="?page={{totalPages}}&perPage={{perPage}}&borough={{borough}}"
                        class="bg-[#2E2E2E] text-white px-3 py-2 rounded shadow hover:bg-gray-700">
                        Last &raquo;
                    </a>
                    {{/if}}
                </nav>
            </div>
            <!-- Modals -->
            <!-- Update Modal -->
            <div id="updateModal"
                class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="modal-content bg-[#eeede7] p-6 rounded-lg shadow-lg w-11/12 md:w-1/2 relative">
                    <span class="close text-gray-700 text-2xl font-bold cursor-pointer absolute top-2 right-4"
                        onclick="closeModal()">Ã—</span>
                    <h2 class="text-xl font-bold mb-4 text-center">Update Restaurant</h2>
                    <form id="updateForm" method="POST">
                        <input type="hidden" name="_method" value="PUT">
                        <div class="mb-4">
                            <label for="updateName" class="block text-sm font-medium text-gray-700">Name:</label>
                            <input type="text" id="updateName" name="name" required
                                class="w-full p-2 border rounded focus:outline-none focus:ring focus:ring-gray-400">
                        </div>
                        <div class="mb-4">
                            <label for="updateBorough" class="block text-sm font-medium text-gray-700">Borough:</label>
                            <input type="text" id="updateBorough" name="borough" required
                                class="w-full p-2 border rounded focus:outline-none focus:ring focus:ring-gray-400">
                        </div>
                        <div class="mb-4">
                            <label for="updateCuisine" class="block text-sm font-medium text-gray-700">Cuisine:</label>
                            <input type="text" id="updateCuisine" name="cuisine" required
                                class="w-full p-2 border rounded focus:outline-none focus:ring focus:ring-gray-400">
                        </div>
                        <button type="submit"
                            class="bg-[#2E2E2E] text-white px-4 py-2 rounded shadow hover:bg-gray-700 focus:outline-none">
                            Update
                        </button>
                    </form>
                </div>
            </div>



            <!-- Details Modal -->
            <div id="detailsModal"
                class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="modal-content bg-[#eeede7] p-6 rounded-lg shadow-lg w-11/12 md:w-1/2 relative">
                    <span class="close text-gray-700 text-2xl font-bold cursor-pointer absolute top-2 right-4"
                        onclick="closeDetailsModal()">Ã—</span>
                    <h2 class="text-xl font-bold mb-4 text-center">Restaurant Details</h2>
                    <p class="mb-2"><strong>Name:</strong> <span id="detailsName" class="text-gray-700"></span></p>
                    <p class="mb-2"><strong>Borough:</strong> <span id="detailsBorough" class="text-gray-700"></span>
                    </p>
                    <p class="mb-2"><strong>Cuisine:</strong> <span id="detailsCuisine" class="text-gray-700"></span>
                    </p>

                    <h3 class="mt-4 text-lg font-bold">Address</h3>
                    <p class="mb-2"><strong>Building:</strong> <span id="detailsBuilding" class="text-gray-700"></span>
                    </p>
                    <p class="mb-2"><strong>Street:</strong> <span id="detailsStreet" class="text-gray-700"></span></p>
                    <p class="mb-2"><strong>Zipcode:</strong> <span id="detailsZipcode" class="text-gray-700"></span>
                    </p>

                    <h3 class="mt-4 text-lg font-bold">Coordinates</h3>
                    <p class="mb-2"><strong>Longitude:</strong> <span id="detailsLongitude"
                            class="text-gray-700"></span></p>
                    <p class="mb-2"><strong>Latitude:</strong> <span id="detailsLatitude" class="text-gray-700"></span>
                    </p>

                    <h3 class="mt-4 text-lg font-bold">Grades</h3>
                    <ul id="detailsGrades" class="list-disc ml-4 text-gray-700">
                        <!-- Grades will be dynamically added here -->
                    </ul>
                </div>
            </div>

        </div>
    </div>




    <!-- Footer -->
    <footer class="bg-[#c85250] text-white py-4">
        <div class="container mx-auto text-center">
            <p>&copy; 2024 Restro. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Open the update modal
        function openModal(id, name, borough, cuisine) {
            // Populate the form fields with the restaurant data
            document.getElementById('updateName').value = name;
            document.getElementById('updateBorough').value = borough;
            document.getElementById('updateCuisine').value = cuisine;

            // Set the form action URL
            document.getElementById('updateForm').action = `/api/restaurants/${id}`;

            // Show the modal
            const modal = document.getElementById('updateModal');
            modal.classList.remove('hidden'); // Remove the hidden class
            modal.classList.add('flex');
        }

        // Close the modal
        function closeModal() {
            const modal = document.getElementById('updateModal');
            modal.classList.add('hidden'); // Add the hidden class
            modal.classList.remove('flex');
        }
        // Open the details modal and populate data
        async function openDetailsModal(restaurantId) {
            try {
                // Fetch the restaurant details from the server
                const response = await fetch(`/api/restaurants/${restaurantId}`);
                if (!response.ok) {
                    throw new Error(`Failed to fetch restaurant details: ${response.statusText}`);
                }

                const restaurant = await response.json();

                // Populate the modal with the restaurant details
                document.getElementById('detailsName').textContent = restaurant.name || 'N/A';
                document.getElementById('detailsBorough').textContent = restaurant.borough || 'N/A';
                document.getElementById('detailsCuisine').textContent = restaurant.cuisine || 'N/A';
                document.getElementById('detailsBuilding').textContent = restaurant.address?.building || 'N/A';
                document.getElementById('detailsStreet').textContent = restaurant.address?.street || 'N/A';
                document.getElementById('detailsZipcode').textContent = restaurant.address?.zipcode || 'N/A';
                document.getElementById('detailsLongitude').textContent = restaurant.address?.coord?.[0] || 'N/A';
                document.getElementById('detailsLatitude').textContent = restaurant.address?.coord?.[1] || 'N/A';

                // Populate grades
                const gradesList = document.getElementById('detailsGrades');
                gradesList.innerHTML = ''; // Clear previous grades
                if (restaurant.grades && restaurant.grades.length > 0) {
                    restaurant.grades.forEach((grade) => {
                        const li = document.createElement('li');
                        li.textContent = `Date: ${new Date(grade.date.$date).toLocaleDateString()} - Grade: ${grade.grade} - Score: ${grade.score}`;
                        gradesList.appendChild(li);
                    });
                } else {
                    const li = document.createElement('li');
                    li.textContent = 'No grades available.';
                    gradesList.appendChild(li);
                }

                // Show the modal
                // Show the modal
                const modal = document.getElementById('detailsModal');
                modal.classList.remove('hidden'); // Remove the hidden class
                modal.classList.add('flex');
            } catch (error) {
                console.error('Error fetching restaurant details:', error);
                alert('Failed to load restaurant details. Please try again.');
            }
        }

        // Close the details modal
        function closeDetailsModal() {
            const modal = document.getElementById('detailsModal');
            modal.classList.add('hidden'); // Add the hidden class
            modal.classList.remove('flex');
        }


        // Handle Delete Restaurant
        async function deleteRestaurant(id) {
            const confirmed = confirm("Are you sure you want to delete this restaurant?");
            if (!confirmed) return;

            try {
                const response = await fetch(`/api/restaurants/${id}`, {
                    method: 'DELETE',
                    credentials: 'include', // Include cookies if needed
                });

                if (response.status !== 204) {
                    throw new Error(`Failed to delete restaurant: ${response.statusText}`);
                }

                // Remove the row from the table
                document.querySelector(`button[onclick="deleteRestaurant('${id}')"]`).closest('tr').remove();

                alert('Restaurant deleted successfully!');
            } catch (error) {
                console.error('Error deleting restaurant:', error);
                alert('Failed to delete restaurant.');
            }
        }

        // Close the modal if user clicks outside of it
        window.onclick = function (event) {
            const modal = document.getElementById('updateModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        };



        // Handle the form submission with AJAX
        document.getElementById('updateForm').addEventListener('submit', async function (event) {
            event.preventDefault(); // Prevent the default form submission behavior

            // Get the restaurant ID from the form's action attribute
            const form = event.target;
            const id = form.action.split('/').pop();

            // Collect the form data
            const updateData = {
                name: document.getElementById('updateName').value,
                borough: document.getElementById('updateBorough').value,
                cuisine: document.getElementById('updateCuisine').value,
            };

            try {

                // Make the PUT request using fetch
                const response = await fetch(`/api/restaurants/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData),
                    credentials: 'include'
                });

                // Handle the response
                if (!response.ok) {
                    throw new Error(`Failed to update restaurant: ${response.statusText}`);
                }

                const result = await response.json();
                console.log('Restaurant updated:', result);

                // Close the modal and refresh the table
                closeModal();
                alert('Restaurant updated successfully!');
                location.reload(); // Refresh the page to reflect changes
            } catch (error) {
                console.error('Error updating restaurant:', error);
                alert('Failed to update restaurant.');
            }
        });
    </script>
</body>

</html>